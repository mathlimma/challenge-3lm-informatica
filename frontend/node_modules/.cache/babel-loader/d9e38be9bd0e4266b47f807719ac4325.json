{"ast":null,"code":"import { createActions, createReducer } from 'reduxsauce';\nimport produce from 'immer';\n/**\n * Creating action types & creators\n */\n\nexport const {\n  Types,\n  Creators\n} = createActions({\n  //get users\n  getUsersRequest: [],\n  getUsersSuccess: ['users'],\n  getUsersFailure: [],\n  //add\n  addUserRequest: ['employee'],\n  addUserSuccess: ['employee'],\n  addUserFailure: [],\n  //update\n  updateUserRequest: ['employee', 'id'],\n  updateUserSuccess: ['employee'],\n  updateUserFailure: [],\n  //delete\n  deleteUserRequest: ['id'],\n  deleteUserSuccess: ['id'],\n  deleteUserFailure: []\n});\n/**\n * Creating the reducer handlers\n */\n\nconst INITIAL_STATE = {\n  users: [],\n  loading: false\n}; // get user\n\nconst getUsersRequest = (state = INITIAL_STATE) => produce(state, draft => {\n  draft.loading = true;\n});\n\nconst getUsersSuccess = (state = INITIAL_STATE, action) => produce(state, draft => {\n  draft.loading = false;\n  draft.users = action.users;\n});\n\nconst getUsersFailure = (state = INITIAL_STATE) => produce(state, draft => {\n  draft.loading = false;\n}); // add user\n\n\nconst addUserRequest = (state = INITIAL_STATE) => produce(state, draft => {\n  draft.loading = true;\n});\n\nconst addUserSuccess = (state = INITIAL_STATE, action) => produce(state, draft => {\n  draft.loading = false;\n  draft.users = draft.users.concat(action.employee);\n});\n\nconst addUserFailure = (state = INITIAL_STATE) => produce(state, draft => {\n  draft.loading = false;\n}); // update user\n\n\nconst updateUserRequest = (state = INITIAL_STATE) => produce(state, draft => {\n  draft.loading = true;\n});\n\nconst updateUserSuccess = (state = INITIAL_STATE, action) => produce(state, draft => {\n  draft.loading = false;\n  draft.users = draft.users.map((user, index) => {\n    if (user.id == action.employee.id) {\n      draft.users[index] = action.employee;\n    }\n  });\n});\n\nconst updateUserFailure = (state = INITIAL_STATE) => produce(state, draft => {\n  draft.loading = false;\n}); // delete user\n\n\nconst deleteUserRequest = (state = INITIAL_STATE) => produce(state, draft => {\n  draft.loading = true;\n});\n\nconst deleteUserSuccess = (state = INITIAL_STATE, action) => produce(state, draft => {\n  draft.loading = false;\n  draft.users = draft.users.filter(user => user.id != action.id);\n});\n\nconst deleteUserFailure = (state = INITIAL_STATE) => produce(state, draft => {\n  draft.loading = false;\n});\n/**\n * Creating reducer\n */\n\n\nexport default createReducer(INITIAL_STATE, {\n  //get\n  [Types.GET_USERS_REQUEST]: getUsersRequest,\n  [Types.GET_USERS_SUCCESS]: getUsersSuccess,\n  [Types.GET_USERS_FAILURE]: getUsersFailure,\n  //add\n  [Types.ADD_USER_REQUEST]: addUserRequest,\n  [Types.ADD_USER_SUCCESS]: addUserSuccess,\n  [Types.ADD_USER_FAILURE]: addUserFailure,\n  //update\n  [Types.UPDATE_USER_REQUEST]: updateUserRequest,\n  [Types.UPDATE_USER_SUCCESS]: updateUserSuccess,\n  [Types.UPDATE_USER_FAILURE]: updateUserFailure,\n  //delete\n  [Types.DELETE_USER_REQUEST]: deleteUserRequest,\n  [Types.DELETE_USER_SUCCESS]: deleteUserSuccess,\n  [Types.DELETE_USER_FAILURE]: deleteUserFailure\n});","map":{"version":3,"sources":["/home/mathlimma/Projects/desafio-3lm-informatica/src/store/ducks/user/index.js"],"names":["createActions","createReducer","produce","Types","Creators","getUsersRequest","getUsersSuccess","getUsersFailure","addUserRequest","addUserSuccess","addUserFailure","updateUserRequest","updateUserSuccess","updateUserFailure","deleteUserRequest","deleteUserSuccess","deleteUserFailure","INITIAL_STATE","users","loading","state","draft","action","concat","employee","map","user","index","id","filter","GET_USERS_REQUEST","GET_USERS_SUCCESS","GET_USERS_FAILURE","ADD_USER_REQUEST","ADD_USER_SUCCESS","ADD_USER_FAILURE","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","UPDATE_USER_FAILURE","DELETE_USER_REQUEST","DELETE_USER_SUCCESS","DELETE_USER_FAILURE"],"mappings":"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","sourcesContent":["import { createActions, createReducer } from 'reduxsauce';\nimport produce from 'immer';\n\n/**\n * Creating action types & creators\n */\n\nexport const { Types, Creators } = createActions({\n  //get users\n  getUsersRequest: [],\n  getUsersSuccess: ['users'],\n  getUsersFailure: [],\n\n  //add\n  addUserRequest: ['employee'],\n  addUserSuccess: ['employee'],\n  addUserFailure: [],\n\n  //update\n  updateUserRequest: ['employee', 'id'],\n  updateUserSuccess: ['employee'],\n  updateUserFailure: [],\n\n  //delete\n  deleteUserRequest: ['id'],\n  deleteUserSuccess: ['id'],\n  deleteUserFailure: [],\n});\n\n/**\n * Creating the reducer handlers\n */\nconst INITIAL_STATE = {\n  users: [],\n  loading: false,\n};\n\n// get user\nconst getUsersRequest = (state = INITIAL_STATE) =>\n  produce(state, draft => {\n    draft.loading = true;\n  });\n\nconst getUsersSuccess = (state = INITIAL_STATE, action) =>\n  produce(state, draft => {\n    draft.loading = false;\n    draft.users = action.users;\n  });\n\nconst getUsersFailure = (state = INITIAL_STATE) =>\n  produce(state, draft => {\n    draft.loading = false;\n  });\n\n// add user\nconst addUserRequest = (state = INITIAL_STATE) =>\n  produce(state, draft => {\n    draft.loading = true;\n  });\n\nconst addUserSuccess = (state = INITIAL_STATE, action) =>\n  produce(state, draft => {\n    draft.loading = false;\n    draft.users = draft.users.concat(action.employee);\n  });\n\nconst addUserFailure = (state = INITIAL_STATE) =>\n  produce(state, draft => {\n    draft.loading = false;\n  });\n\n// update user\nconst updateUserRequest = (state = INITIAL_STATE) =>\n  produce(state, draft => {\n    draft.loading = true;\n  });\n\nconst updateUserSuccess = (state = INITIAL_STATE, action) =>\n  produce(state, draft => {\n    draft.loading = false;\n    draft.users = draft.users.map((user, index) => {\n      if (user.id == action.employee.id) {\n        draft.users[index] = action.employee;\n      }\n    });\n  });\n\nconst updateUserFailure = (state = INITIAL_STATE) =>\n  produce(state, draft => {\n    draft.loading = false;\n  });\n\n// delete user\nconst deleteUserRequest = (state = INITIAL_STATE) =>\n  produce(state, draft => {\n    draft.loading = true;\n  });\n\nconst deleteUserSuccess = (state = INITIAL_STATE, action) =>\n  produce(state, draft => {\n    draft.loading = false;\n    draft.users = draft.users.filter(user => user.id != action.id);\n  });\n\nconst deleteUserFailure = (state = INITIAL_STATE) =>\n  produce(state, draft => {\n    draft.loading = false;\n  });\n\n/**\n * Creating reducer\n */\nexport default createReducer(INITIAL_STATE, {\n  //get\n  [Types.GET_USERS_REQUEST]: getUsersRequest,\n  [Types.GET_USERS_SUCCESS]: getUsersSuccess,\n  [Types.GET_USERS_FAILURE]: getUsersFailure,\n\n  //add\n  [Types.ADD_USER_REQUEST]: addUserRequest,\n  [Types.ADD_USER_SUCCESS]: addUserSuccess,\n  [Types.ADD_USER_FAILURE]: addUserFailure,\n\n  //update\n  [Types.UPDATE_USER_REQUEST]: updateUserRequest,\n  [Types.UPDATE_USER_SUCCESS]: updateUserSuccess,\n  [Types.UPDATE_USER_FAILURE]: updateUserFailure,\n\n  //delete\n  [Types.DELETE_USER_REQUEST]: deleteUserRequest,\n  [Types.DELETE_USER_SUCCESS]: deleteUserSuccess,\n  [Types.DELETE_USER_FAILURE]: deleteUserFailure,\n});\n"]},"metadata":{},"sourceType":"module"}