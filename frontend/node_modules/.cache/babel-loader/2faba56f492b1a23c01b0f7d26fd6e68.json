{"ast":null,"code":"import { all, put, call, takeLatest } from 'redux-saga/effects';\nimport { Creators as UsersActions, Types } from '.';\nimport api from '../../../services/api';\nexport function* getUsers() {\n  const {\n    getUsersSuccess,\n    getUsersFailure\n  } = UsersActions;\n\n  try {\n    const response = yield call(api.get, '/employees');\n    yield put(getUsersSuccess(response.data));\n  } catch (error) {\n    yield put(getUsersFailure());\n  }\n}\nexport function* addUser({\n  employee\n}) {\n  console.log('aaa');\n  console.log(employee);\n  const {\n    addUserSuccess,\n    addUserFailure\n  } = UsersActions;\n\n  try {\n    yield call(api.post, '/employees', employee);\n    yield put(addUserSuccess());\n  } catch (error) {\n    console.log(error.response);\n    yield put(addUserFailure());\n  }\n}\nexport function* updateUser({\n  user,\n  id\n}) {\n  const {\n    addUserSuccess,\n    addUserFailure\n  } = UsersActions;\n\n  try {\n    yield call(api.put, `/employees/${id}`, user);\n    yield put(addUserSuccess());\n  } catch (error) {\n    yield put(addUserFailure());\n  }\n}\nexport function* deleteUser({\n  user,\n  id\n}) {\n  const {\n    addUserSuccess,\n    addUserFailure\n  } = UsersActions;\n\n  try {\n    yield call(api.delete, `/employees/${id}`, user);\n    yield put(addUserSuccess());\n  } catch (error) {\n    yield put(addUserFailure());\n  }\n}\nexport default all([takeLatest(Types.GET_USERS_REQUEST, getUsers), takeLatest(Types.ADD_USER_REQUEST, addUser), takeLatest(Types.UPDATE_USER_REQUEST, updateUser), takeLatest(Types.DELETE_USER_REQUEST, deleteUser)]);","map":{"version":3,"sources":["/home/mathlimma/Projects/desafio-3lm-informatica/src/store/ducks/user/saga.js"],"names":["all","put","call","takeLatest","Creators","UsersActions","Types","api","getUsers","getUsersSuccess","getUsersFailure","response","get","data","error","addUser","employee","console","log","addUserSuccess","addUserFailure","post","updateUser","user","id","deleteUser","delete","GET_USERS_REQUEST","ADD_USER_REQUEST","UPDATE_USER_REQUEST","DELETE_USER_REQUEST"],"mappings":"AAAA,SAASA,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,UAAzB,QAA2C,oBAA3C;AACA,SAASC,QAAQ,IAAIC,YAArB,EAAmCC,KAAnC,QAAgD,GAAhD;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AAEA,OAAO,UAAUC,QAAV,GAAqB;AAC1B,QAAM;AAAEC,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAAuCL,YAA7C;;AACA,MAAI;AACF,UAAMM,QAAQ,GAAG,MAAMT,IAAI,CAACK,GAAG,CAACK,GAAL,EAAU,YAAV,CAA3B;AACA,UAAMX,GAAG,CAACQ,eAAe,CAACE,QAAQ,CAACE,IAAV,CAAhB,CAAT;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,UAAMb,GAAG,CAACS,eAAe,EAAhB,CAAT;AACD;AACF;AAED,OAAO,UAAUK,OAAV,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAgC;AACrCC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,QAAM;AAAEG,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,MAAqCf,YAA3C;;AACA,MAAI;AACF,UAAMH,IAAI,CAACK,GAAG,CAACc,IAAL,EAAW,YAAX,EAAyBL,QAAzB,CAAV;AACA,UAAMf,GAAG,CAACkB,cAAc,EAAf,CAAT;AACD,GAHD,CAGE,OAAOL,KAAP,EAAc;AACdG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACH,QAAlB;AACA,UAAMV,GAAG,CAACmB,cAAc,EAAf,CAAT;AACD;AACF;AAED,OAAO,UAAUE,UAAV,CAAqB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAArB,EAAmC;AACxC,QAAM;AAAEL,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,MAAqCf,YAA3C;;AACA,MAAI;AACF,UAAMH,IAAI,CAACK,GAAG,CAACN,GAAL,EAAW,cAAauB,EAAG,EAA3B,EAA8BD,IAA9B,CAAV;AACA,UAAMtB,GAAG,CAACkB,cAAc,EAAf,CAAT;AACD,GAHD,CAGE,OAAOL,KAAP,EAAc;AACd,UAAMb,GAAG,CAACmB,cAAc,EAAf,CAAT;AACD;AACF;AAED,OAAO,UAAUK,UAAV,CAAqB;AAAEF,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAArB,EAAmC;AACxC,QAAM;AAAEL,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,MAAqCf,YAA3C;;AACA,MAAI;AACF,UAAMH,IAAI,CAACK,GAAG,CAACmB,MAAL,EAAc,cAAaF,EAAG,EAA9B,EAAiCD,IAAjC,CAAV;AACA,UAAMtB,GAAG,CAACkB,cAAc,EAAf,CAAT;AACD,GAHD,CAGE,OAAOL,KAAP,EAAc;AACd,UAAMb,GAAG,CAACmB,cAAc,EAAf,CAAT;AACD;AACF;AAED,eAAepB,GAAG,CAAC,CACjBG,UAAU,CAACG,KAAK,CAACqB,iBAAP,EAA0BnB,QAA1B,CADO,EAEjBL,UAAU,CAACG,KAAK,CAACsB,gBAAP,EAAyBb,OAAzB,CAFO,EAGjBZ,UAAU,CAACG,KAAK,CAACuB,mBAAP,EAA4BP,UAA5B,CAHO,EAIjBnB,UAAU,CAACG,KAAK,CAACwB,mBAAP,EAA4BL,UAA5B,CAJO,CAAD,CAAlB","sourcesContent":["import { all, put, call, takeLatest } from 'redux-saga/effects';\nimport { Creators as UsersActions, Types } from '.';\nimport api from '../../../services/api';\n\nexport function* getUsers() {\n  const { getUsersSuccess, getUsersFailure } = UsersActions;\n  try {\n    const response = yield call(api.get, '/employees');\n    yield put(getUsersSuccess(response.data));\n  } catch (error) {\n    yield put(getUsersFailure());\n  }\n}\n\nexport function* addUser({ employee }) {\n  console.log('aaa');\n  console.log(employee);\n  const { addUserSuccess, addUserFailure } = UsersActions;\n  try {\n    yield call(api.post, '/employees', employee);\n    yield put(addUserSuccess());\n  } catch (error) {\n    console.log(error.response);\n    yield put(addUserFailure());\n  }\n}\n\nexport function* updateUser({ user, id }) {\n  const { addUserSuccess, addUserFailure } = UsersActions;\n  try {\n    yield call(api.put, `/employees/${id}`, user);\n    yield put(addUserSuccess());\n  } catch (error) {\n    yield put(addUserFailure());\n  }\n}\n\nexport function* deleteUser({ user, id }) {\n  const { addUserSuccess, addUserFailure } = UsersActions;\n  try {\n    yield call(api.delete, `/employees/${id}`, user);\n    yield put(addUserSuccess());\n  } catch (error) {\n    yield put(addUserFailure());\n  }\n}\n\nexport default all([\n  takeLatest(Types.GET_USERS_REQUEST, getUsers),\n  takeLatest(Types.ADD_USER_REQUEST, addUser),\n  takeLatest(Types.UPDATE_USER_REQUEST, updateUser),\n  takeLatest(Types.DELETE_USER_REQUEST, deleteUser),\n]);\n"]},"metadata":{},"sourceType":"module"}