{"ast":null,"code":"import { all, put, call, takeLatest } from 'redux-saga/effects';\nimport { Creators as UsersActions, Types } from '.';\nimport api from '../../../services/api';\nexport function* getUsers() {\n  const {\n    getUsersSuccess,\n    getUsersFailure\n  } = UsersActions;\n\n  try {\n    const response = yield call(api.get, '/employees');\n    yield put(getUsersSuccess(response.data));\n  } catch (error) {\n    yield put(getUsersFailure());\n  }\n}\nexport function* addUser({\n  employee\n}) {\n  const {\n    addUserSuccess,\n    addUserFailure\n  } = UsersActions;\n\n  try {\n    const response = yield call(api.post, '/employees', employee);\n    yield put(addUserSuccess(response.data));\n  } catch (error) {\n    yield put(addUserFailure());\n  }\n}\nexport function* updateUser({\n  employee,\n  id\n}) {\n  const {\n    updateUserSuccess,\n    updateUserFailure\n  } = UsersActions;\n\n  try {\n    const response = yield call(api.put, `/employees/${id}`, employee);\n    yield put(updateUserSuccess(response.data));\n  } catch (error) {\n    yield put(updateUserFailure());\n  }\n}\nexport function* deleteUser({\n  id\n}) {\n  const {\n    deleteUserSuccess,\n    deleteUserFailure\n  } = UsersActions;\n\n  try {\n    yield call(api.delete, `/employees/${id}`);\n    yield put(deleteUserSuccess(id));\n  } catch (error) {\n    yield put(deleteUserFailure());\n  }\n}\nexport default all([takeLatest(Types.GET_USERS_REQUEST, getUsers), takeLatest(Types.ADD_USER_REQUEST, addUser), takeLatest(Types.UPDATE_USER_REQUEST, updateUser), takeLatest(Types.DELETE_USER_REQUEST, deleteUser)]);","map":{"version":3,"sources":["/home/mathlimma/Projects/desafio-3lm-informatica/src/store/ducks/user/saga.js"],"names":["all","put","call","takeLatest","Creators","UsersActions","Types","api","getUsers","getUsersSuccess","getUsersFailure","response","get","data","error","addUser","employee","addUserSuccess","addUserFailure","post","updateUser","id","updateUserSuccess","updateUserFailure","deleteUser","deleteUserSuccess","deleteUserFailure","delete","GET_USERS_REQUEST","ADD_USER_REQUEST","UPDATE_USER_REQUEST","DELETE_USER_REQUEST"],"mappings":"AAAA,SAASA,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,UAAzB,QAA2C,oBAA3C;AACA,SAASC,QAAQ,IAAIC,YAArB,EAAmCC,KAAnC,QAAgD,GAAhD;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AAEA,OAAO,UAAUC,QAAV,GAAqB;AAC1B,QAAM;AAAEC,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAAuCL,YAA7C;;AACA,MAAI;AACF,UAAMM,QAAQ,GAAG,MAAMT,IAAI,CAACK,GAAG,CAACK,GAAL,EAAU,YAAV,CAA3B;AACA,UAAMX,GAAG,CAACQ,eAAe,CAACE,QAAQ,CAACE,IAAV,CAAhB,CAAT;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,UAAMb,GAAG,CAACS,eAAe,EAAhB,CAAT;AACD;AACF;AAED,OAAO,UAAUK,OAAV,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAgC;AACrC,QAAM;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,MAAqCb,YAA3C;;AACA,MAAI;AACF,UAAMM,QAAQ,GAAG,MAAMT,IAAI,CAACK,GAAG,CAACY,IAAL,EAAW,YAAX,EAAyBH,QAAzB,CAA3B;AACA,UAAMf,GAAG,CAACgB,cAAc,CAACN,QAAQ,CAACE,IAAV,CAAf,CAAT;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,UAAMb,GAAG,CAACiB,cAAc,EAAf,CAAT;AACD;AACF;AAED,OAAO,UAAUE,UAAV,CAAqB;AAAEJ,EAAAA,QAAF;AAAYK,EAAAA;AAAZ,CAArB,EAAuC;AAC5C,QAAM;AAAEC,IAAAA,iBAAF;AAAqBC,IAAAA;AAArB,MAA2ClB,YAAjD;;AACA,MAAI;AACF,UAAMM,QAAQ,GAAG,MAAMT,IAAI,CAACK,GAAG,CAACN,GAAL,EAAW,cAAaoB,EAAG,EAA3B,EAA8BL,QAA9B,CAA3B;AACA,UAAMf,GAAG,CAACqB,iBAAiB,CAACX,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,UAAMb,GAAG,CAACsB,iBAAiB,EAAlB,CAAT;AACD;AACF;AAED,OAAO,UAAUC,UAAV,CAAqB;AAAEH,EAAAA;AAAF,CAArB,EAA6B;AAClC,QAAM;AAAEI,IAAAA,iBAAF;AAAqBC,IAAAA;AAArB,MAA2CrB,YAAjD;;AACA,MAAI;AACF,UAAMH,IAAI,CAACK,GAAG,CAACoB,MAAL,EAAc,cAAaN,EAAG,EAA9B,CAAV;AACA,UAAMpB,GAAG,CAACwB,iBAAiB,CAACJ,EAAD,CAAlB,CAAT;AACD,GAHD,CAGE,OAAOP,KAAP,EAAc;AACd,UAAMb,GAAG,CAACyB,iBAAiB,EAAlB,CAAT;AACD;AACF;AAED,eAAe1B,GAAG,CAAC,CACjBG,UAAU,CAACG,KAAK,CAACsB,iBAAP,EAA0BpB,QAA1B,CADO,EAEjBL,UAAU,CAACG,KAAK,CAACuB,gBAAP,EAAyBd,OAAzB,CAFO,EAGjBZ,UAAU,CAACG,KAAK,CAACwB,mBAAP,EAA4BV,UAA5B,CAHO,EAIjBjB,UAAU,CAACG,KAAK,CAACyB,mBAAP,EAA4BP,UAA5B,CAJO,CAAD,CAAlB","sourcesContent":["import { all, put, call, takeLatest } from 'redux-saga/effects';\nimport { Creators as UsersActions, Types } from '.';\nimport api from '../../../services/api';\n\nexport function* getUsers() {\n  const { getUsersSuccess, getUsersFailure } = UsersActions;\n  try {\n    const response = yield call(api.get, '/employees');\n    yield put(getUsersSuccess(response.data));\n  } catch (error) {\n    yield put(getUsersFailure());\n  }\n}\n\nexport function* addUser({ employee }) {\n  const { addUserSuccess, addUserFailure } = UsersActions;\n  try {\n    const response = yield call(api.post, '/employees', employee);\n    yield put(addUserSuccess(response.data));\n  } catch (error) {\n    yield put(addUserFailure());\n  }\n}\n\nexport function* updateUser({ employee, id }) {\n  const { updateUserSuccess, updateUserFailure } = UsersActions;\n  try {\n    const response = yield call(api.put, `/employees/${id}`, employee);\n    yield put(updateUserSuccess(response.data));\n  } catch (error) {\n    yield put(updateUserFailure());\n  }\n}\n\nexport function* deleteUser({ id }) {\n  const { deleteUserSuccess, deleteUserFailure } = UsersActions;\n  try {\n    yield call(api.delete, `/employees/${id}`);\n    yield put(deleteUserSuccess(id));\n  } catch (error) {\n    yield put(deleteUserFailure());\n  }\n}\n\nexport default all([\n  takeLatest(Types.GET_USERS_REQUEST, getUsers),\n  takeLatest(Types.ADD_USER_REQUEST, addUser),\n  takeLatest(Types.UPDATE_USER_REQUEST, updateUser),\n  takeLatest(Types.DELETE_USER_REQUEST, deleteUser),\n]);\n"]},"metadata":{},"sourceType":"module"}